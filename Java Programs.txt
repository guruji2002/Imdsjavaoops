1. Develop a JAVA pgm to demonstrate the precedence and associativity among arithmetic operators. The program should also demonstrate how the default precedence can be overridden.

class Prg1
{
	public static void main(String args[])
{
float i=40;
float j=80;
float k=40;

float l = i+j/k;
	System.out.println("value of L:" + l);
	System.out.println("Precedence overriding: Using brackets");
l=(i+j)/k;
	System.out.println("Value of L:"+l);
float n=i/k*2+j;
	System.out.println("\n\nvalue of n:" +n);
	System.out.println("Overriding Associativity: Using brackets");
n=i/(k*2)+j;
System.out.println("value of n:" +n);
}
}



2. Write a Java program to validate a date. The program should accept day, month and year and it should report whether they form a valid date or not.

import java.util.Scanner;

public class DateValidator 
{
    
    public static boolean isLeapYear(int year) 
    {
               return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    }

    public static boolean isValidDate(int day, int month, int year) 
    {
        
        if (year < 1) return false;

      
        if (month < 1 || month > 12) return false;

        
        int[] daysInMonth = { 31, 28, 31, 30, 31, 30, 
                              31, 31, 30, 31, 30, 31 };

        
        if (month == 2 && isLeapYear(year)) {
            daysInMonth[1] = 29;
        }

        
        return day >= 1 && day <= daysInMonth[month - 1];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter day: ");
        int day = scanner.nextInt();

        System.out.print("Enter month: ");
        int month = scanner.nextInt();

        System.out.print("Enter year: ");
        int year = scanner.nextInt();

        if (isValidDate(day, month, year)) {
            System.out.println("The date is valid.");
        } else {
            System.out.println("The date is invalid.");
        }

        scanner.close();
    }
}



3. Write a JAVA program to display the following pattern.

class Prg3
{
	public static void main (String args[])
{
System.out.println("Pattern Display");
for (int i=1;i<=5;i++)
{
	for(int j=6-i; j>1;j--) 
	{
		System.out.print("");
	}
	for (int j=1;j<=i;j++)  
	{
		System.out.print(" ");
		System.out.print(i);
	}
	System.out.println();
}
}
}




4. Write a JAVA program to print the first n members of Fibonacci series.
import java.util.Scanner;
public class prg4
{
	public static void main(String args[])
{
int fib1=0,fib2=1,temp=0,num=0;
Scanner sc=new Scanner(System.in);
System.out.print("Enter Fibonacci Limit:");
try
{
	num=sc.nextInt();
	if(num<=0)
{
	throw new Exception("Input Limit not in a Range--- Enter Valid Limit");
}
else
	System.out.println("Fibonacci Limit"+num);
}
catch(Exception e)
{
	System.out.println("Input Error -InValid Limit-Re-Enter...."+e);
	System.exit(0);
}
System.out.println("Fibonacci series:");
System.out.print(fib1);
System.out.print(""+fib2);
for(int i=2;i<num;i++)
{
	temp=fib1+fib2;
	System.out.println(""+temp);
	fib1=fib2;
	fib2=temp;
}
}
}





5. Write a program to generate the multiplication tables of a range of
numbers between m and n inclusive and m < n.

import java.util.Scanner;
class Prg5
{
public static void main(String args[])
{
int m=0, n=0, i, j;
System.out.println("Enter range of numbers to print their multiplication tables");
Scanner in = new Scanner(System.in);
try
{
	m = in.nextInt();
	n = in.nextInt();

if(m > n || m<=0 || n<=0)
{
	throw new Exception (“Input Numbers are not Valid... Enter valid Numbers’);
}
else 
	System.out.print(“Given Numbers: "+m+", “+n+"\n");
}
catch(Exception e)
{
	System.out.printiln(“Input Error—InValid Range—Re-Enter.. "+e);
	System.exit(0);
}

for (i = m; i <= n; i++)
{
	System.out.printin("\n"+"Multiplication table of "+i);

	for (j = 1; j <= 10; j++)
	{
		System.out.println(i+"*"+j+" = "+(i*j));
	}
}
}
}





6. Write a JAVA program to define a class, define instance methods for setting and retrieving values of instance variables and instantiate its object.

class emp
{
	int id;
	String name;
	String address;

void setdata(int i, String n, String ad)
{
	id=i;
	name=n;
	address=ad;
}
void printdata()
{
	System.out.println("Employee details are :");
	System.out.println("ID :" +id);
	System.out.println("Name :" +name);
	System.out.println("Address :" +address);
}
}

class Prg6
{
public static void main(String arg[])
{
	emp e=new emp(); 
	e.setdata(123, "Shreya ","Bangalore");
	e.printdata();
}
}

OUTPUT




7. Write a JAVA program to demonstrate static member data and static member methods. |

class StaticDemo
{
	static int a = 42;
	static int b = 99;

static void callme()
{
	System.out.println(“a =" + a); 
} 
} 
class Prg7
{
public static void main(String args[])
{
	StaticDemo.callme();
	System.out.println("a in main method =" + StaticDemo.a);
	System.out.println("b in main method =" + StaticDemo.b);
}
}





8. Write a JAVA Program to demonstrate nested classes.

class outer
{
	int x = 100;
void test()
{
	inner i = new inner();
	i.display();
}

class inner 
{
	int y = 10; 
void display()
{
	System.out.println("x = " +x);
	System.out.println("y = " +y);
}
}
void showy()
{
	System.out.println(“In showy’);
}
}
class Prg8
{
public static void main(String arg[])
{
	outer o = new outer();
	System.out.println("From Outer’);
	o.test();
	o.showy();
	outer.inner i = o.new inner();
	System.out.println("From Inner");
	i.display();
}
}





9. Write a JAVA program to demonstrate dynamic method dispatch.

class Box
{
	double dim1;
	double dim2;
Box(double a, double b)
{ 
	dim1 = a;
	dim2 = b;
}
Box(double a)
{
	dim1 = dim2 = a;
}
double area()
{
	System.out.println("Area for Box is undefined.");
	return 0;
}
}

class Rectangle extends Box
{
Rectangle(double a, double b)
{
	super(a, b);
}
double area()
{
	System.out.println("Inside Area for Rectangle.");
	return dim1 * dim2;
}
}

class Triangle extends Box
{
Triangle(double a, double b)
{
	super(a, b);
}
double area()
{
	System.out.println("Inside Area for Triangle.");
	return dim1 * dim2 / 2;
}
}

class Square extends Box
{
Square (double a){
	Super(a);
}
double area()
{
	System.out.println("Inside Area for Square.");
	return dim1 * dim2;
 }
}

Class Prg9
{
public static void main(String args[])
{

	Box ob = new Box(10, 10);
	Rectangle r = new Rectangle(9, 5);
	Triangle t = new Triangle(10, 8);
	Square s = new Square(3);
	Box b;
	b=r;
	System.out.println("Area is * + b.area());
	b=t
	System.out.println("Area is " + b.area());
	b=s;
	System.out.println("Area is " + b.area());
	b = ob; 
	System.out.println("Area is * + b.area());
 }
}




10. Write a JAVA program to implement inheritance and demonstrate use of method overriding.

class A ;
{
	int i, j;
A(int a, int b)
{ 
	i=a
	j=b;
}
void show()
{
	System.out.println(“Inside A.. ):
	System.out.println("i and j:"+i+""+ j);
}
}

class B extends A
{
	int k;
B(int a, int b, int C)
{
	super(a, b);
	k=c;
}
void show()
{
	System.out.println(“Inside B..");
	System.out.println("i and j:"+i+""+j);
	System.out.println("k: "+k);
	System.out.println("Inside B.. A's Show");
super.show();
}
}

Class Prg10
{
public static void main(String args[])
{
	B subOb = new B(1, 2, 3);
	subOb.show();
	A Ob = new A(5, 4);
	System.out.println(“\n’);
	Ob.show();
}
}




11. Write a JAVA program to implement the concept of importing Classes from user defined package and creating packages.

In P1 Folder:
package P1;
public class Student
{
	int regno; String name;
public void getdata(int r, String s)
{
	regno=r;
	name=s;
}
public void putdata()
{
	System.out.println("regno = " +regno);
	System.out.println(‘name = " + name);
}
}
In Root Folder
import P1.Student;
class Prg11
{
public static Void main(String arg[])
{

	Student obj1 =new Student();
	Student Obj2=new Student();
	System.out.println("Student Details:");
	obj1.inputdata(1, "RAM");
	obj1.printdata();
	obj2.inputdata(2,"SHAM");
	obj2.printdata();
}
}





12. Write a program to demonstrate abstract class an methods
abstract class A
{
	abstract void callme();
void callmetoo() 
{
	System.out.println("This is A's concrete method.");
}
}
class B extends A
{
void m1()
{
	System.out.println("B's m1 method...");
}
void callme()
{
	System.out.println("B's implementation of callme.");
}
}

class Prg12
{
 public static void main(String args[])
{
	B b = new B();
	b.m1();
	b.callme();
	b.callmetoo();
}
}




13. Write a JAVA Program to implement an array of objects of a class.

import java.util.Scanner:

public class Prg13
{
public static void main(String[] args)
{
	System.out.print(“Enter Size of the Array to be created: “);
	Scanner sc = new Scanner(System.in);
	String name;
	Double sal;
	int n=sc.nextInt();
	Employee[] staff = new Employee[n];

for (int i=0; i<n; i++)
{
	System.out.println("Enter Array Elements(Name and Salary):");
	name=sc.next();
	sal=sc.nextDouble();
	staff[i] = new Employee(name, sal);
}
System.out printin("List of Employees");

for (int j=0; j<n; j++)
staff[j]_print();
}
}
class Employee
{
	private String name;
	private double salary;
public Employee(String n, double s)
{
	name = n;
	salary = s;
}
public void print()
{
	System.out.println(name + " " + salary);
}
}






14. Write a JAVA program to demonstrate String class and its methods.

import java.lang.String;

class Prg14
{
public static void main(String arg[])
{
	String s1=new String("Java");
	String s2="Programming language";

	System.out.println(" The string s1 is :"+s1);
	System.out.println(" The string s2 is : "+s2);

	System.out.println(" Length of the string s1 is : "+s1.length());

	System.out.println(" The first occurence of r in s2 is at the position: "+s2.IndexOf("r"));
	System.out.printiln(" The String in Upper Case :"+s1.toUpperCase());
	System.out.println(" The String in Lower Case :"+s1.toLowerCase());

	System.out.println(" s1 equals to s2 : " +s1.equals(s2));
	System.out.println(" s1 equals ignore case to s2 : " +s1.equalslgnoreCase(s2));


int result=s1.compareTo(s2);
System.out.println("After compareTo()");
if(result==0) 
	System.out.println( s1 +" is equal to "+s2);
else
if(result>0) 
	System.out.println( s1 + "is greater than "+S2);
else
	System.out.println(" "+s1+"is smaller than "+s2);
	System.out.println(" Character at an index of 3 is :" +s1.charAt(3));

String s3=s1.substring(1,3);

	System.out.println(" Extracted substring is :"+s3);
	System.out.println(" After Replacing J with k in s1:"+s1.replace('J','K'));

String s4= " This is a book ";

	System.out.println(" The string s4 is :"+s4);

S	ystem.out.println(" After trim() :"+s4.trim());
}
}





15. Write a JAVA program to implement the concept of exception handling by creating user defined exceptions.

import java.util.*;
class myexception extends Exception
{
 myexception(String s)
{
	super(s);
}
}
class Prg15
{
public static void main(String argv[])throws myexception
{
	System.out.print("Enter marks:");

try
{
	Scanner sc=new Scanner(System.in);
	int marks=sc.nextInt();
if(marks>100||marks<0)
{
	throw new myexception("Input marks not in Range");
}
else
	System.out.println("Marks:"+marks);
}
catch(Exception e)
{
	System.out.println("Input Error-InValid Marks-Re Enter.."+e);
}
}
}





16. Write a JAVA program using synehronized threads, which demonstrates praduoer Oonsumer Concept

class A
{
 int n;
 boolean b=false;
 synchronized int get()
 {
 if(!b)
 try
 {
  	wait();
 }
 catch(Exception e)
 {
 	System.out.println(e);
 }
 	System.out.println("Got:+n);
 	b=false;
 	notify();
 	return n;
}
synchronized void put(int n)
{
 if(b)
 try
 {
 	 wait();
 }
 catch(Exception e)
 {
 	 System.out.println(e);
 }
 	this.n=n;
 	b=true;
 	System.out.println("Put:"+n);
 	notify();
 }
}

class producer implements Runnable
 {
 	A a1;
	 Thread t1;
	 producer(A a1)
 {
 	this.a1=a1;
 	t1=new Thread(this);
 	t1.start();
}
public void run()
{
  for(int i=1;i<=10;i++)
 {
 	 a1.put(i);
 }
 }
}

class consumer implements Runnable
{
 	A a1;
 	Thread t1;
 	consumer(A a1)
{
	 this.a1=a1;
	 t1=new Thread(this);
	 t1.start();
}
public void run()
{
 for(int j=1;j<=10;j++)
 {
 	 a1.get();
 }
 }
}

 class Prg16
 {
 public static void main(String args[])
 {
 	A a1=new A();
	producer p1=new producer(a1);
	consumer c1=new consumer(a1);
 }
}







17. Write a JAVA program that creates three threads. First thread displays “Good Morning” every one second, second thread displays “Hello” every two seconds and the third thread displays “Welcome” every three seconds.

class goodmorning extends Thread
{
 public void run()
 {
 try
 {
 int i=0;
 while(i<5)
 {
 sleep(1000);
 System.out.println("good morning");
 i++;
 }
}
catch(Exception e)
{
}
}
}

class hello extends Thread
{
 public void run()
 {
 try
 {
 int i=0;
 while(i<5)
 {
 sleep(2000);
 System.out.println("hello");
 i++;
 }
}
catch(Exception e)
{
}
}
}
 
class welcome extends Thread
{
 public void run()
 {
 try
 {
 int i=0;
 while(i<5)
 {
 sleep(3000);
 System.out.println("welcome");
 i++;
 }
}
catch(Exception e)
{
} 
}
}







18. Write a JAVA program which uses FilelnputStream / FileOutPutStream Classes.
Create new notepad file save as (t1.txt) , open t1 file write some data, save. Again, create new notepad file save as(t2.txt), don’t add any content, save.

import java.io.*;

class Prg18
{

public static void main(String args[]) throws IOException
{
int i;
FilelnputStream fin;
FileOutputStream fout;

try
{ 
 try
 {
	fin = new FileInputStream(args[0]);
 }
 catch(FileNotFoundException e)
 {
	System.out.printin(“Input File Not Found");
	return;
 }
 fout = new FileOutputStream(args[1]);
}

catch(ArrayIndexOutOfBoundsException e)
{
	System.out.println("filenames are not passed ");
	return;
}

try
{
do
{
	i= fin.read();
	if(i !=-1)
	fout.write(i);
}
while(i !=-1);
	System.out.println("File copied Successfully");
}

catch(IOException e)
{
	System.out.printin("File Error");
}
fin.close();
fout.close();
}
}








19. Write a JAVA program to list all the files in a directory including the files present in all its subdirectories.

import java.io.File;

public class Prg19
{
static void Print(File[] arr, int index, int level)
{

if(index == arr.length) 
return;

for (int i = 0; i < level; i++)
System.out.print("\t");

if(arr[index].isFile())
System.out.println(arr[index].getName());

else if(arr[index].isDirectory())
{
	System.out.println("[" + arr[index].getName() + "]");

	Print(arr[index].listFiles(), 0, level + 1); 
}

Print(arr, ++index, level); 
}

public static void main(String[] args)
{
String dirpath = "D:/java prg/pack"; 
File mdir = new File(dirpath); 

if(mdir.exists() && mdir.isDirectory())
{
	File arr{] = mdir.listFiles();
	System.out.println(" The main directory Files are :" + mdir);
	Print(arr,0,0);
}
else
	System.out.println("Invalid Directory!...");

}
}







20. Write a JAVA program to demonstrate the life cycle of applet.

import java.awt.*;

import java.applet.*;
public class Prg20 extends Applet
String msg;
public void init() 
{
	System.out.println("Applet is initialized");
	setBackground(Color.cyan);
	setForeground(Color.red);
	msg = "Applet is initialized —";
}


public void start()
{
	System.out.println("Applet is started");
	msg = msg + "Applet is started —";
}

public void stop()
{
	System.out.println(“Applet execution is stopped");
	msg = msg + "Applet execution is stopped —";
}

public void destroy()
{
	System.out.println("Applet is Destroyed"); 
}


public void paint(Graphics g)
{
	System.out.println("Painting the Applet"); 
	msg = msg + "Painting the Applet —";
	g.drawString(msg, 20, 30);
}
}


